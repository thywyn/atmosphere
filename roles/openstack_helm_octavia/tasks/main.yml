# Copyright (c) 2022 VEXXHOST, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Generate OpenStack-Helm endpoints
  ansible.builtin.include_role:
    name: openstack_helm_endpoints
  vars:
    openstack_helm_endpoints_repo_name: "{{ openstack_helm_octavia_chart_repo_name }}"
    openstack_helm_endpoints_repo_url: "{{ openstack_helm_octavia_chart_repo_url }}"
    openstack_helm_endpoints_chart: "{{ openstack_helm_octavia_chart_name }}"

- name: Create management network
  openstack.cloud.network:
    cloud: atmosphere
    # Network settings
    name: "lb-mgmt-net"
  register: _openstack_helm_octavia_management_network

- name: Create management subnet
  openstack.cloud.subnet:
    cloud: atmosphere
    # Subnet settings
    network_name: "lb-mgmt-net"
    name: "lb-mgmt-subnet"
    cidr: "{{ openstack_helm_octavia_management_subnet_cidr }}"

- name: Create health manager security group
  openstack.cloud.security_group:
    cloud: atmosphere
    name: "lb-health-mgr-sec-grp"
  register: _openstack_helm_octavia_health_manager_sg

- name: Create health manager security group rules
  openstack.cloud.security_group_rule:
    cloud: atmosphere
    security_group: "{{ _openstack_helm_octavia_health_manager_sg.id }}"
    direction: ingress
    ethertype: IPv4
    protocol: tcp
    port_range_min: "{{ item }}"
    port_range_max: "{{ item }}"
  loop:
    - 5555
    - 10514
    - 20514

- name: Create health manager networking ports
  changed_when: false
  ansible.builtin.shell: |
    export OS_CLOUD=atmosphere
    openstack port create --host {{ hostvars[item]['ansible_fqdn'] }} \
    --device-owner "Octavia:health-mgr" --network lb-mgmt-net --security-group {{ _openstack_helm_octavia_health_manager_sg.id }} \
    octavia-health-manager-port-{{ hostvars[item]['ansible_fqdn'] | split('.') | first }}
  loop: "{{ groups['controllers'] }}"

- name: Get health manager networking ports
  openstack.cloud.port_info:
    cloud: atmosphere
    port: "octavia-health-manager-port-{{ hostvars[item]['ansible_fqdn'] | split('.') | first }}"
  loop: "{{ groups['controllers'] }}"
  register: _openstack_helm_octavia_health_manager_ports

- name: Create amphora security group
  openstack.cloud.security_group:
    cloud: atmosphere
    name: "lb-mgmt-sec-grp"
  register: _openstack_helm_octavia_amphora_sg

- name: Create amphora security group rules
  openstack.cloud.security_group_rule:
    cloud: atmosphere
    security_group: "{{ _openstack_helm_octavia_amphora_sg.id }}"
    direction: ingress
    ethertype: IPv4
    protocol: tcp
    port_range_min: "{{ item.0 }}"
    port_range_max: "{{ item.0 }}"
    remote_ip_prefix: "{{ item.1.openstack_ports[0].fixed_ips[0].ip_address }}/32"
  with_nested:
  - [22, 9443]
  - "{{ _openstack_helm_octavia_health_manager_ports.results }}"

- name: Set controller_ip_port_list
  ansible.builtin.set_fact:
    _controller_ip_port_list: "{{ _controller_ip_port_list|d([]) + [item.openstack_ports[0].fixed_ips[0].ip_address + ':5555']}}"
  loop: "{{ _openstack_helm_octavia_health_manager_ports.results }}"

- name: Create amphora flavor
  openstack.cloud.compute_flavor:
    cloud: atmosphere
    name: "m1.amphora"
    vcpus: "1"
    ram: "1024"
    disk: "2"
    is_public: false
  register: _openstack_helm_octavia_amphora_flavor

- name: Create amphora keypair
  openstack.cloud.keypair:
    cloud: atmosphere
    name: "octavia_ssh_key"

- name: Download amphora image
  ansible.builtin.get_url:
    url: "{{ openstack_helm_octavia_amphora_image_url }}"
    dest: "/tmp/{{ openstack_helm_octavia_amphora_image_url | basename }}"

- name: Upload images
  openstack.cloud.image:
    cloud: atmosphere
    name: "amphora-x64-haproxy"
    filename: "/tmp/{{ openstack_helm_octavia_amphora_image_url | basename }}"
    container_format: "bare"
    disk_format: "qcow2"
    tags:
      - "amphora"
  register: _openstack_helm_octavia_amphora_image

- name: Check if certificate secret exists
  kubernetes.core.k8s_info:
    kind: Secret
    name: octavia-certs
    namespace: openstack
  register: _openstack_helm_octavia_cert_secret

- name: Create certificate secret
  block:
    - name: Create CA private key
      community.crypto.openssl_privatekey_pipe:
        type: RSA
      register: _openstack_helm_octavia_ca_key

    - name: Create certificate signing request (CSR) for CA
      community.crypto.openssl_csr_pipe:
        basic_constraints:
          - 'CA:TRUE'
        basic_constraints_critical: true
        common_name: "octavia"
        key_usage:
          - "keyEncipherment"
          - "digitalSignature"
          - "keyCertSign"
        key_usage_critical: true
        organization_name: "VEXXHOST OpenStack - Octavia"
        privatekey_content: "{{ _openstack_helm_octavia_ca_key.privatekey }}"
        use_common_name_for_san: false
      register: _openstack_helm_octavia_ca_csr

    - name: Create self-signed CA certificate from CSR
      community.crypto.x509_certificate_pipe:
        csr_content: "{{ _openstack_helm_octavia_ca_csr.csr }}"
        entrust_not_after: "+3650d"
        privatekey_content: "{{ _openstack_helm_octavia_ca_key.privatekey }}"
        provider: selfsigned
      register: _openstack_helm_octavia_ca

    - name: Create client private key
      community.crypto.openssl_privatekey_pipe:
        type: RSA
      register: _openstack_helm_octavia_client_ca_key

    - name: Create certificate signing request (CSR) for client
      community.crypto.openssl_csr_pipe:
        common_name: "octavia-node"
        key_usage:
          - "keyEncipherment"
          - "digitalSignature"
          - "keyCertSign"
        organization_name: "VEXXHOST OpenStack - Octavia"
        privatekey_content: "{{ _openstack_helm_octavia_client_ca_key.privatekey }}"
        use_common_name_for_san: false
      register: _openstack_helm_octavia_client_csr

    - name: Create self-signed client certificate
      community.crypto.x509_certificate_pipe:
        csr_content: "{{ _openstack_helm_octavia_client_csr.csr }}"
        ownca_content: "{{ _openstack_helm_octavia_ca.certificate }}"
        ownca_privatekey_content: "{{ _openstack_helm_octavia_ca_key.privatekey }}"
        ownca_not_after: "+3650d"
        entrust_not_after: "+3650d"
        privatekey_content: "{{ _openstack_helm_octavia_client_ca_key.privatekey }}"
        provider: ownca
      register: _openstack_helm_octavia_client_ca

    - name: Createa kubernetes secret
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: octavia-certs
            namespace: openstack
          stringData:
            ca_01.pem: |
              {{ _openstack_helm_octavia_ca.certificate }}
            cakey.pem: |
              {{ _openstack_helm_octavia_ca_key.privatekey }}
            client.pem: |
              {{ _openstack_helm_octavia_client_ca.certificate }}
              {{ _openstack_helm_octavia_client_ca_key.privatekey }}

  when: ( _openstack_helm_octavia_cert_secret.resources | length ) == 0

# - name: Get admin project
#   openstack.cloud.project_info:
#     auth:
#       auth_url: "https://{{ openstack_helm_endpoints['identity']['host_fqdn_override']['public']['host'] }}"
#       username: "{{ openstack_helm_endpoints['identity']['auth']['admin']['username'] }}"
#       password: "{{ openstack_helm_endpoints['identity']['auth']['admin']['password'] }}"
#       project_name: admin
#       user_domain_name: Default
#       project_domain_name: Default
#     region_name: "{{ openstack_helm_endpoints['identity']['auth']['glance']['region_name'] }}"
#     name: admin
#   register: _octavia_admin_project

- name: Create admin compute quotaset
  openstack.cloud.quota:
    cloud: atmosphere
    # Note: It uses project name instead of id.
    name: admin
    key_pairs: -1
    ram: -1
    cores: -1
    instances: -1
    server_groups: -1
    server_group_members: -1
    injected_files: -1
    # Followings are not supported by openstack collection yet.
    # injected_file_path_bytes: -1
    # injected_file_content_bytes: -1
    # security_groups: -1
    # security_group_rules: -1

- name: Deploy Helm chart
  kubernetes.core.helm:
    name: "{{ openstack_helm_octavia_chart_name }}"
    chart_ref: "{{ openstack_helm_octavia_chart_repo_name }}/{{ openstack_helm_octavia_chart_name }}"
    chart_version: 0.2.5
    release_namespace: openstack
    kubeconfig: /etc/kubernetes/admin.conf
    values: "{{ _openstack_helm_octavia_values | combine(openstack_helm_octavia_values, recursive=True) }}"

- name: Create Ingress
  ansible.builtin.include_role:
    name: openstack_helm_ingress
  vars:
    openstack_helm_ingress_endpoint: load_balancer
    openstack_helm_ingress_service_name: octavia-api
    openstack_helm_ingress_service_port: 9876
